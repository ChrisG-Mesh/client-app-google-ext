{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const OpenLink=()=>{const[iFrameUrl,setIFrameUrl]=useState(null);const[showIframe,setShowIframe]=useState(false);const[authToken,setAuthToken]=useState(null);useEffect(()=>{checkLoginStatus();},[]);const checkLoginStatus=()=>{const token=localStorage.getItem('auth_token');if(token){setAuthToken(token);}else{console.log('User not logged in');}};const fetchData=async()=>{try{const response=await fetch('http://localhost:3000/api/getCatalogLink',{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(authToken)// Include auth token if needed\n}});if(!response.ok){throw new Error('Network response error');}const result=await response.json();setIFrameUrl(result.iFrameUrl);}catch(error){console.error('Error fetching the API',error);}};const handleOpenIframe=()=>{if(!iFrameUrl){fetchData();}setShowIframe(true);};return/*#__PURE__*/_jsx(\"div\",{children:authToken?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Authenticated successfully with token: \",authToken]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleOpenIframe,children:\"Open Mesh\"}),showIframe&&iFrameUrl&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Catalog Link success\"}),/*#__PURE__*/_jsxs(\"p\",{style:{whiteSpace:'pre-wrap'},children:[\"Catalog IFrame URL: \",iFrameUrl]}),/*#__PURE__*/_jsx(\"iframe\",{src:iFrameUrl,style:{width:'100%',height:'600px',border:'none'}})]})]}):/*#__PURE__*/_jsx(\"p\",{children:\"User not logged in\"})});};export default OpenLink;","map":{"version":3,"names":["React","useState","useEffect","jsxs","_jsxs","jsx","_jsx","OpenLink","iFrameUrl","setIFrameUrl","showIframe","setShowIframe","authToken","setAuthToken","checkLoginStatus","token","localStorage","getItem","console","log","fetchData","response","fetch","method","headers","concat","ok","Error","result","json","error","handleOpenIframe","children","onClick","style","whiteSpace","src","width","height","border"],"sources":["/Users/christopher.gentibano/Desktop/Google Extension Project/google-ext/react-mesh-app/src/components/OpenLink.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst OpenLink = () => {\n  const [iFrameUrl, setIFrameUrl] = useState(null);\n  const [showIframe, setShowIframe] = useState(false);\n  const [authToken, setAuthToken] = useState(null);\n\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n\n  const checkLoginStatus = () => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      setAuthToken(token);\n    } else {\n      console.log('User not logged in');\n    }\n  };\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/api/getCatalogLink', {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}` // Include auth token if needed\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response error');\n      }\n\n      const result = await response.json();\n      setIFrameUrl(result.iFrameUrl);\n    } catch (error) {\n      console.error('Error fetching the API', error);\n    }\n  };\n\n  const handleOpenIframe = () => {\n    if (!iFrameUrl) {\n      fetchData();\n    }\n    setShowIframe(true);\n  };\n\n  return (\n    <div>\n      {authToken ? (\n        <div>\n          <p>Authenticated successfully with token: {authToken}</p>\n          <button onClick={handleOpenIframe}>Open Mesh</button>\n          {showIframe && iFrameUrl && (\n            <div>\n              <h3>Catalog Link success</h3>\n              <p style={{ whiteSpace: 'pre-wrap' }}>Catalog IFrame URL: {iFrameUrl}</p>\n              <iframe src={iFrameUrl} style={{ width: '100%', height: '600px', border: 'none' }} />\n            </div>\n          )}\n        </div>\n      ) : (\n        <p>User not logged in</p>\n      )}\n    </div>\n  );\n};\n\nexport default OpenLink;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEnD,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACS,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACW,SAAS,CAAEC,YAAY,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACdY,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAChD,GAAIF,KAAK,CAAE,CACTF,YAAY,CAACE,KAAK,CAAC,CACrB,CAAC,IAAM,CACLG,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACnC,CACF,CAAC,CAED,KAAM,CAAAC,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,0CAA0C,CAAE,CACvEC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBAAkB,CAClC,eAAe,WAAAC,MAAA,CAAYb,SAAS,CAAG;AACzC,CACF,CAAC,CAAC,CAEF,GAAI,CAACS,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACpCpB,YAAY,CAACmB,MAAM,CAACpB,SAAS,CAAC,CAChC,CAAE,MAAOsB,KAAK,CAAE,CACdZ,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAChD,CACF,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,GAAI,CAACvB,SAAS,CAAE,CACdY,SAAS,CAAC,CAAC,CACb,CACAT,aAAa,CAAC,IAAI,CAAC,CACrB,CAAC,CAED,mBACEL,IAAA,QAAA0B,QAAA,CACGpB,SAAS,cACRR,KAAA,QAAA4B,QAAA,eACE5B,KAAA,MAAA4B,QAAA,EAAG,yCAAuC,CAACpB,SAAS,EAAI,CAAC,cACzDN,IAAA,WAAQ2B,OAAO,CAAEF,gBAAiB,CAAAC,QAAA,CAAC,WAAS,CAAQ,CAAC,CACpDtB,UAAU,EAAIF,SAAS,eACtBJ,KAAA,QAAA4B,QAAA,eACE1B,IAAA,OAAA0B,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7B5B,KAAA,MAAG8B,KAAK,CAAE,CAAEC,UAAU,CAAE,UAAW,CAAE,CAAAH,QAAA,EAAC,sBAAoB,CAACxB,SAAS,EAAI,CAAC,cACzEF,IAAA,WAAQ8B,GAAG,CAAE5B,SAAU,CAAC0B,KAAK,CAAE,CAAEG,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,OAAO,CAAEC,MAAM,CAAE,MAAO,CAAE,CAAE,CAAC,EAClF,CACN,EACE,CAAC,cAENjC,IAAA,MAAA0B,QAAA,CAAG,oBAAkB,CAAG,CACzB,CACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAzB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}