{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const OpenLinkWebSDK=()=>{const[linkToken,setLinkToken]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const fetchLinkToken=async()=>{setLoading(true);setError(null);try{const response=await fetch('http://localhost:3000/api/linkTokenCall',{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json'}});if(!response.ok){throw new Error('Network response error');}const result=await response.json();setLinkToken(result.linkToken);}catch(error){console.error('Error fetching the API',error);setError(error.message);}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:fetchLinkToken,disabled:loading,children:loading?'Loading...':'Get Link Token'}),error&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",error]}),linkToken&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Link Token: \",linkToken]})]});};export default OpenLinkWebSDK;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","OpenLinkWebSDK","linkToken","setLinkToken","error","setError","loading","setLoading","fetchLinkToken","response","fetch","method","headers","ok","Error","result","json","console","message","children","onClick","disabled"],"sources":["/Users/christopher.gentibano/Desktop/Google Extension Project/google-ext/react-mesh-app/src/components/OpenLinkWebSDK.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst OpenLinkWebSDK = () => {\n  const [linkToken, setLinkToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchLinkToken = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:3000/api/linkTokenCall', {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response error');\n      }\n\n      const result = await response.json();\n      setLinkToken(result.linkToken);\n    } catch (error) {\n      console.error('Error fetching the API', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={fetchLinkToken} disabled={loading}>\n        {loading ? 'Loading...' : 'Get Link Token'}\n      </button>\n      {error && <p>Error: {error}</p>}\n      {linkToken && <p>Link Token: {linkToken}</p>}\n    </div>\n  );\n};\n\nexport default OpenLinkWebSDK;\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExC,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACQ,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACU,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAE7C,KAAM,CAAAY,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjCD,UAAU,CAAC,IAAI,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,yCAAyC,CAAE,CACtEC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwB,CAAC,CAC3C,CAEA,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CACpCb,YAAY,CAACY,MAAM,CAACb,SAAS,CAAC,CAChC,CAAE,MAAOE,KAAK,CAAE,CACda,OAAO,CAACb,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9CC,QAAQ,CAACD,KAAK,CAACc,OAAO,CAAC,CACzB,CAAC,OAAS,CACRX,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,mBACEP,KAAA,QAAAmB,QAAA,eACErB,IAAA,WAAQsB,OAAO,CAAEZ,cAAe,CAACa,QAAQ,CAAEf,OAAQ,CAAAa,QAAA,CAChDb,OAAO,CAAG,YAAY,CAAG,gBAAgB,CACpC,CAAC,CACRF,KAAK,eAAIJ,KAAA,MAAAmB,QAAA,EAAG,SAAO,CAACf,KAAK,EAAI,CAAC,CAC9BF,SAAS,eAAIF,KAAA,MAAAmB,QAAA,EAAG,cAAY,CAACjB,SAAS,EAAI,CAAC,EACzC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}