"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLink = void 0;
var popup_1 = require("./utils/popup");
var event_types_1 = require("./utils/event-types");
var sdk_specs_1 = require("./utils/sdk-specs");
var currentOptions;
var possibleOrigins = new Set([
    'https://web.meshconnect.com',
    'https://web.getfront.com'
]);
var iframeElement = function () {
    return document.getElementById(popup_1.iframeId);
};
function sendMessageToIframe(message) {
    possibleOrigins.forEach(function (origin) {
        var _a;
        try {
            (_a = iframeElement().contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, origin);
        }
        catch (e) {
            console.error('Mesh SDK: Failed to deliver message to the iframe');
            console.error(e);
        }
    });
}
function eventsListener(event) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    switch (event.data.type) {
        case 'brokerageAccountAccessToken': {
            var payload = {
                accessToken: event.data.payload
            };
            (_a = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _a === void 0 ? void 0 : _a.call(currentOptions, {
                type: 'integrationConnected',
                payload: payload
            });
            (_b = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _b === void 0 ? void 0 : _b.call(currentOptions, payload);
            break;
        }
        case 'delayedAuthentication': {
            var payload = {
                delayedAuth: event.data.payload
            };
            (_c = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _c === void 0 ? void 0 : _c.call(currentOptions, {
                type: 'integrationConnected',
                payload: payload
            });
            (_d = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onIntegrationConnected) === null || _d === void 0 ? void 0 : _d.call(currentOptions, payload);
            break;
        }
        case 'transferFinished': {
            var payload = event.data.payload;
            (_e = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _e === void 0 ? void 0 : _e.call(currentOptions, {
                type: 'transferCompleted',
                payload: payload
            });
            (_f = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onTransferFinished) === null || _f === void 0 ? void 0 : _f.call(currentOptions, payload);
            break;
        }
        case 'close':
        case 'done': {
            var payload = (_g = event.data) === null || _g === void 0 ? void 0 : _g.payload;
            (_h = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onExit) === null || _h === void 0 ? void 0 : _h.call(currentOptions, payload === null || payload === void 0 ? void 0 : payload.errorMessage, payload);
            (0, popup_1.removePopup)();
            break;
        }
        case 'oauthLinkOpen': {
            if (event.data.link) {
                var w = 700;
                var h = 800;
                var left = screen.width / 2 - w / 2;
                var top_1 = screen.height / 2 - h / 2;
                (_j = window
                    .open(event.data.link, '_blank', "popup,noopener,noreferrer,resizable,scrollbars,width=".concat(w, ",height=").concat(h, ",top=").concat(top_1, ",left=").concat(left))) === null || _j === void 0 ? void 0 : _j.focus();
            }
            break;
        }
        case 'loaded': {
            sendMessageToIframe({
                type: 'meshSDKSpecs',
                payload: __assign({}, sdk_specs_1.sdkSpecs)
            });
            if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.accessTokens) {
                sendMessageToIframe({
                    type: 'frontAccessTokens',
                    payload: currentOptions.accessTokens
                });
            }
            if (currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.transferDestinationTokens) {
                sendMessageToIframe({
                    type: 'frontTransferDestinationTokens',
                    payload: currentOptions.transferDestinationTokens
                });
            }
            (_k = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _k === void 0 ? void 0 : _k.call(currentOptions, { type: 'pageLoaded' });
            break;
        }
        default: {
            if ((0, event_types_1.isLinkEventTypeKey)(event.data.type)) {
                (_l = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.onEvent) === null || _l === void 0 ? void 0 : _l.call(currentOptions, event.data);
            }
            break;
        }
    }
}
var createLink = function (options) {
    var openLink = function (linkToken) { return __awaiter(void 0, void 0, void 0, function () {
        var linkUrl, iframeUrlObject;
        var _a;
        return __generator(this, function (_b) {
            if (!linkToken) {
                (_a = options === null || options === void 0 ? void 0 : options.onExit) === null || _a === void 0 ? void 0 : _a.call(options, 'Invalid link token!');
                return [2 /*return*/];
            }
            currentOptions = options;
            linkUrl = window.atob(linkToken);
            iframeUrlObject = new URL(linkUrl);
            if (iframeUrlObject.origin) {
                possibleOrigins.add(iframeUrlObject.origin);
            }
            window.removeEventListener('message', eventsListener);
            (0, popup_1.addPopup)(linkUrl);
            window.addEventListener('message', eventsListener);
            return [2 /*return*/];
        });
    }); };
    var closeLink = function () {
        var _a;
        (0, popup_1.removePopup)();
        window.removeEventListener('message', eventsListener);
        (_a = options.onExit) === null || _a === void 0 ? void 0 : _a.call(options);
    };
    return {
        openLink: openLink,
        closeLink: closeLink
    };
};
exports.createLink = createLink;
